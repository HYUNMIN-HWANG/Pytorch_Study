# 글자의 특정 연속성이 의미를 가진 단어라는 것을 학습하게 만들고 그것으로 문장이나 문단과 같은 더 긴 형태의 글을 이해하도록 만들어야 합니다.
# n-gram : 글자보다 더 긴 형태의 Token을 만들어내기 위해 사용하는 방법
# 1개 단위가 아닌 여러 개 (n)의 연속된 윈도우를 단위로 살펴보기 위해 나온 개념

S1 = "나는 책상 위에 사과를 먹었다."

print([S1[i:i+1] for i in range(len(S1))])  # uni-gram
# ['나', '는', ' ', '책', '상', ' ', '위', '에', ' ', '사', '과', '를', ' ', '먹', '었', '다', '.']

print([S1[i:i+2] for i in range(len(S1))])  # bi-gram
# ['나는', '는 ', ' 책', '책상', '상 ', ' 위', '위에', '에 ', ' 사', '사과', '과를', '를 ', ' 먹', '먹었', '었다', '다.', '.']

print([S1[i:i+3] for i in range(len(S1))])  # tri-gram
# ['나는 ', '는 책', ' 책상', '책상 ', '상 위', ' 위에', '위에 ', '에 사', ' 사과', '사과를', '과를 ', '를 먹', ' 먹었', '먹었다', '었다.', '다.', '.']

# 장점 : 연속적으로 사용되는 용어를 잘 찾아낼 수 있다.
# 단점 : 쓸모 없는 조합이 너무 많이 생성된다. 어미 변화가 매우 다양한데 의미느 ㄴ비슷하지만 서로 다른 Token이 매우 많이 생겨날 것
